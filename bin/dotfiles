#!/bin/bash

# Color codes and emoji codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${RED}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

set -e

# Paths
DOTFILES_LOG="$HOME/.dotfiles.log"
DOTFILES_DIR="$HOME/.dotfiles"
IS_FIRST_RUN="$HOME/.dotfiles_run"
USER_TO_RUN="vscode"
TAGS=""             # Default to no specific tags
PLAYBOOK="main.yml" # Default playbook name

# Detect OS
if [ -f /etc/os-release ]; then
  . /etc/os-release
  OS=$ID
else
  OS=$(uname -s)
fi

# Process command-line options for user (-u) and tags (-t)
while getopts "u:t:p:" opt; do
  case $opt in
  u) USER_TO_RUN=$OPTARG ;;
  t) TAGS="--tags $OPTARG" ;;
  p) PLAYBOOK=$OPTARG ;;
  *)
    echo "Usage: $0 [-u user] [-t tags] [-p playbook]"
    exit 1
    ;;
  esac
done

# Function to display tasks
function __task {
  # if _task is called while a task was set, complete the previous
  if [[ $TASK != "" ]]; then
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  fi
  # set new task title and print
  TASK=$1
  printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# Function to run commands with error handling
function _cmd {
  #create log if it doesn't exist
  if ! [[ -f $DOTFILES_LOG ]]; then
    touch $DOTFILES_LOG
  fi
  # empty conduro.log
  >$DOTFILES_LOG
  # hide stdout, on error we print and exit
  if eval "$1" 1>/dev/null 2>$DOTFILES_LOG; then
    return 0 # success
  fi
  # read error from log and add spacing
  printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
  while read line; do
    printf "      ${line}\n"
  done <$DOTFILES_LOG
  printf "\n"
  # remove log file
  rm $DOTFILES_LOG
  # exit installation
  exit 1
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  _clear_task
}

function check_package_installed() {
  local package=$1
  local check_cmd=""

  case $OS in
  arch)
    check_cmd="pacman -Q $package"
    ;;
  ubuntu)
    check_cmd="dpkg -l $package | grep -q ^ii"
    ;;
  *)
    echo "Unsupported OS: $OS"
    return 1
    ;;
  esac

  if eval "$check_cmd" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

function install_package() {
  local package=$1
  local install_cmd=""

  case $OS in
  arch)
    install_cmd="sudo pacman -S --noconfirm $package"
    ;;
  ubuntu)
    install_cmd="sudo apt-get install -y $package"
    ;;
  *)
    echo "Unsupported OS: $OS"
    return 1
    ;;
  esac

  _cmd "$install_cmd"
}

function system_setup() {
  # Update system package lists first for Ubuntu
  if [ "$OS" = "ubuntu" ]; then
    __task "Updating package lists"
    _cmd "sudo apt-get update"
  fi

  # Install essential packages if not present
  if [ "$OS" = "arch" ]; then
    packages=("ansible" "python3" "python-pip" "python-watchdog" "openssh" "git" "which" "unzip")
  elif [ "$OS" = "ubuntu" ]; then
    packages=("ansible" "python3" "python3-pip" "python3-watchdog" "openssh-client" "git" "which" "unzip")
  else
    echo "Unsupported OS: $OS"
    exit 1
  fi

  for pkg in "${packages[@]}"; do
    if ! check_package_installed "$pkg"; then
      __task "Installing $pkg"
      install_package "$pkg"
    fi
  done

  # Set locale if it hasn't been configured
  if [ "$(localectl status 2>/dev/null | grep 'LANG=en_US.UTF-8')" == "" ]; then
    __task "Setting Locale"

    case $OS in
    arch)
      _cmd "sudo localectl set-locale LANG=en_US.UTF-8"
      ;;
    ubuntu)
      _cmd "sudo update-locale LANG=en_US.UTF-8"
      ;;
    esac
  fi
}

# Initial system setup based on detected OS
__task "Detected OS: $OS"
system_setup

# Clone or update the dotfiles repo
if ! [[ -d "$DOTFILES_DIR" ]]; then
  __task "Cloning repository"
  _cmd "git clone --quiet https://github.com/joserosas-vanta/dotfiles.git $DOTFILES_DIR"
else
  __task "Updating repository"
  _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

pushd "$DOTFILES_DIR" 2>&1 >/dev/null

# List files in the dotfiles directory to debug
__task "Checking dotfiles contents"
ls -la "$DOTFILES_DIR"
_task_done

# Check if playbook exists
PLAYBOOK_PATH="$DOTFILES_DIR/$PLAYBOOK"
if [ ! -f "$PLAYBOOK_PATH" ]; then
  echo -e "${X_MARK} ${RED}Error: Playbook '$PLAYBOOK' not found in $DOTFILES_DIR${NC}"
  echo -e "${ARROW} ${YELLOW}Available files:${NC}"
  ls -la "$DOTFILES_DIR"

  # Try to find any playbook files
  echo -e "${ARROW} ${YELLOW}Looking for alternative playbooks...${NC}"
  FOUND_PLAYBOOKS=$(find "$DOTFILES_DIR" -name "*.yml" -o -name "*.yaml" | grep -v "roles\|tasks\|handlers\|vars\|defaults")

  if [ -n "$FOUND_PLAYBOOKS" ]; then
    echo -e "${CHECK_MARK} ${GREEN}Found possible playbooks:${NC}"
    echo "$FOUND_PLAYBOOKS"

    # Set the first found playbook as the one to use
    FIRST_PLAYBOOK=$(echo "$FOUND_PLAYBOOKS" | head -n 1)
    PLAYBOOK=$(basename "$FIRST_PLAYBOOK")
    PLAYBOOK_PATH="$FIRST_PLAYBOOK"

    echo -e "${ARROW} ${CYAN}Using '$PLAYBOOK' as the playbook.${NC}"
  else
    echo -e "${X_MARK} ${RED}No playbook files found. Please check your repository.${NC}"
    exit 1
  fi
fi

# Run Ansible playbook directly without 1Password dependency
__task "Running Ansible playbook: $PLAYBOOK_PATH"
ansible-playbook -u "$USER_TO_RUN" "$PLAYBOOK_PATH" $TAGS "$@"

# Check Ansible playbook exit status directly to avoid _cmd errors
if [ $? -eq 0 ]; then
  _task_done
else
  printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
  echo -e "${X_MARK} ${RED}Ansible playbook execution failed.${NC}"
  exit 1
fi

popd 2>&1 >/dev/null

# First run prompt
if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  touch "$IS_FIRST_RUN"
fi
