#!/bin/bash

# Color codes and emoji codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

set -e

# Paths
OP_INSTALLED=false
OP_AUTHENTICATED=false
OP_VAULT_SECRET=""
ID=""
DOTFILES_LOG="$HOME/.dotfiles.log"
DOTFILES_DIR="$HOME/.dotfiles"
IS_FIRST_RUN="$HOME/.dotfiles_run"

# Function to display tasks
function __task {
    # if _task is called while a task was set, complete the previous
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    fi
    # set new task title and print
    TASK=$1
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# Function to run commands with error handling
function _cmd {
    #create log if it doesn't exist
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch $DOTFILES_LOG
    fi
    # empty conduro.log
    >$DOTFILES_LOG
    # hide stdout, on error we print and exit
    if eval "$1" 1>/dev/null 2>$DOTFILES_LOG; then
        return 0 # success
    fi
    # read error from log and add spacing
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    while read line; do
        printf "      ${line}\n"
    done <$DOTFILES_LOG
    printf "\n"
    # remove log file
    rm $DOTFILES_LOG
    # exit installation
    exit 1
}

function _clear_task {
    TASK=""
}

function _task_done {
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    _clear_task
}

function arch_setup() {
    # Install essential packages if not present
    packages=("ansible" "python3" "python-pip" "python-watchdog" "openssh" "git" "unzip")
    for pkg in "${packages[@]}"; do
        if ! pacman -Q "$pkg" >/dev/null 2>&1; then
            __task "Installing $pkg"
            _cmd "sudo pacman -S --noconfirm $pkg"
        fi
    done

    # Set locale if it hasn’t been configured
    if [ "$(localectl status | grep 'LANG=en_US.UTF-8')" == "" ]; then
        __task "Setting Locale"
        _cmd "sudo localectl set-locale LANG=en_US.UTF-8"
    fi
}
# 1Password CLI access confirmation
function confirmVaultAccess() {
    __task "Checking for 1Password CLI"
    if op --version >/dev/null 2>&1; then
        OP_INSTALLED=true
        _cmd "op --account my.1password.com vault list"
        OP_AUTHENTICATED=true
    fi
}

# Initial Arch Linux setup
arch_setup

# Clone or update the dotfiles repo
if ! [[ -d "$DOTFILES_DIR" ]]; then
    __task "Cloning repository"
    _cmd "git clone --quiet https://github.com/sillypoise/sp-dotfiles.git $DOTFILES_DIR"
else
    __task "Updating repository"
    _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

pushd "$DOTFILES_DIR" 2>&1 >/dev/null
confirmVaultAccess

# Run Ansible playbook if 1Password authentication is successful
if [[ -n $OP_INSTALLED && -n $OP_AUTHENTICATED ]]; then
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}1Password Authentication successful!${NC}\n"
    ansible-playbook "$DOTFILES_DIR/main.yml" "$@"
else
    printf "${OVERWRITE}${LRED} [X]  ${LRED}1Password Authentication failed.${NC}\n"
fi

popd 2>&1 >/dev/null

# First run prompt
if ! [[ -f "$IS_FIRST_RUN" ]]; then
    echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
    echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
    touch "$IS_FIRST_RUN"
fi
